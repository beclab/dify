# base image
FROM python:3.10-slim AS base

LABEL maintainer="takatost@gmail.com"

# install packages and dependencies
FROM base AS build

#COPY requirements.txt /requirements.txt
COPY api/requirements.txt /requirements.txt

RUN apt-get update \
    && apt-get install -y --no-install-recommends gcc g++ libffi-dev libgmp-dev libmpfr-dev libmpc-dev ffmpeg \
    && pip install --prefix=/usr/local -r requirements.txt \
    && apt-get remove --purge -y gcc \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir temp_lib
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "amd64" ]; then \
        echo "Building for AMD64" && \
        cp /usr/lib/x86_64-linux-gnu/libavcodec.so.* temp_lib/ && \
        cp /usr/lib/x86_64-linux-gnu/libavformat.so.* temp_lib/ && \
        cp /usr/lib/x86_64-linux-gnu/libmpfr.so.* temp_lib/ && \
        cp /usr/lib/x86_64-linux-gnu/libmpc.so.* temp_lib/; \
    else \
        echo "Building for ARM64" && \
        cp /usr/lib/aarch64-linux-gnu/libavcodec.so.* temp_lib/ && \
        cp /usr/lib/aarch64-linux-gnu/libavformat.so.* temp_lib/ && \
        cp /usr/lib/aarch64-linux-gnu/libmpfr.so.* temp_lib/ && \
        cp /usr/lib/aarch64-linux-gnu/libmpc.so.* temp_lib/; \
    fi

# production stage
FROM base AS production

ENV FLASK_APP app.py
ENV EDITION SELF_HOSTED
ENV DEPLOY_ENV PRODUCTION
ENV CONSOLE_API_URL http://127.0.0.1:5001
ENV CONSOLE_WEB_URL http://127.0.0.1:3000
ENV SERVICE_API_URL http://127.0.0.1:5001
ENV APP_WEB_URL http://127.0.0.1:3000

EXPOSE 5001

# set timezone
ENV TZ UTC

WORKDIR /app/api

#&& apt-get install -y --no-install-recommends curl wget vim nodejs ffmpeg libgmp-dev libmpfr-dev libmpc-dev \
#RUN apt-get update \
#    && apt-get install -y --no-install-recommends curl wget vim nodejs libgmp-dev libmpfr-dev libmpc-dev \
#    && apt-get autoremove -y \
#    && rm -rf /var/lib/apt/lists/*

COPY --from=build /usr/local /usr/local
# COPY --from=build /usr/lib /usr/lib
COPY --from=build /usr/bin/ffmpeg /usr/bin/ffmpeg
#COPY --from=build /usr/lib/x86_64-linux-gnu/libavcodec.so.* /usr/lib/x86_64-linux-gnu/
#COPY --from=build /usr/lib/x86_64-linux-gnu/libavformat.so.* /usr/lib/x86_64-linux-gnu/

RUN mkdir temp_lib
COPY --from=build temp_lib/* temp_lib/

ARG TARGETARCH
RUN if [ "$TARGETARCH" = "amd64" ]; then \
        echo "Building for AMD64" && \
        mv temp_lib/* /usr/lib/x86_64-linux-gnu/; \
    else \
        echo "Building for ARM64" && \
        mv temp_lib/* /usr/lib/aarch64-linux-gnu/; \
    fi

#COPY . /app/api/
COPY api /app/api/

#COPY docker/entrypoint.sh /entrypoint.sh
COPY api/docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ARG COMMIT_SHA
ENV COMMIT_SHA ${COMMIT_SHA}

ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]